name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Frontend checks
  frontend:
    name: Frontend (Next.js)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ./frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npm run type-check

      - name: Lint
        run: npm run lint

      - name: Run tests
        run: npm test

      - name: Build
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: ./frontend/.next/
          retention-days: 7

  # Backend/API checks
  backend:
    name: Backend (FastAPI)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./api
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: ./api/requirements*.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Type check with mypy
        run: mypy . --strict

      - name: Lint with ruff
        run: ruff check .

      - name: Format check with ruff
        run: ruff format --check .

      - name: Security check with bandit
        run: bandit -r . -f json -o bandit-report.json || true

      - name: Run tests with pytest
        run: |
          pytest tests/ -v \
            --cov=. \
            --cov-report=xml \
            --cov-report=html \
            --cov-fail-under=80 \
            --junitxml=test-results.xml

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-test-results
          path: |
            ./api/test-results.xml
            ./api/htmlcov/
            ./api/bandit-report.json
          retention-days: 7

  # ML package checks
  ml:
    name: ML Package
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./ml
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: ./ml/requirements*.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Type check with mypy
        run: mypy . --strict

      - name: Lint with ruff
        run: ruff check .

      - name: Format check with ruff
        run: ruff format --check .

      - name: Run tests with pytest
        run: |
          pytest tests/ -v \
            --cov=ml \
            --cov-report=xml \
            --cov-report=html \
            --cov-fail-under=70 \
            --junitxml=test-results.xml

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ml-test-results
          path: |
            ./ml/test-results.xml
            ./ml/htmlcov/
          retention-days: 7

  # Documentation checks
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js (for markdownlint)
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install markdownlint
        run: npm install -g markdownlint-cli

      - name: Lint markdown files
        run: markdownlint "**/*.md" --ignore node_modules --ignore .next

      - name: Check for broken links (optional)
        run: |
          # You can add link checking here if needed
          echo "Link checking can be added later"

  # Security and dependency checks
  security:
    name: Security & Dependencies
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Check for secrets with GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Integration tests
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [frontend, backend, ml]
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup test environment
        run: |
          echo "Setting up integration test environment"
          # Here you would:
          # - Start test database
          # - Start API server
          # - Run E2E tests
          # - Test API contracts

      - name: Placeholder for integration tests
        run: |
          echo "Integration tests would run here"
          echo "- API health checks"
          echo "- Frontend/API integration"
          echo "- ML pipeline end-to-end"

  # Summary job
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [frontend, backend, ml, docs, security]
    if: always()
    
    steps:
      - name: Check all jobs
        run: |
          if [[ "${{ needs.frontend.result }}" == "success" && \
                "${{ needs.backend.result }}" == "success" && \
                "${{ needs.ml.result }}" == "success" && \
                "${{ needs.docs.result }}" == "success" && \
                "${{ needs.security.result }}" == "success" ]]; then
            echo "✅ All CI checks passed!"
            exit 0
          else
            echo "❌ Some CI checks failed:"
            echo "Frontend: ${{ needs.frontend.result }}"
            echo "Backend: ${{ needs.backend.result }}"
            echo "ML: ${{ needs.ml.result }}"
            echo "Docs: ${{ needs.docs.result }}"
            echo "Security: ${{ needs.security.result }}"
            exit 1
          fi